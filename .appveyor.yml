# The "Visual Studio 2013" VM supports the lowest Python 2.7 version, which is 2.7.15
image: Visual Studio 2013

# Maximum number of concurrent jobs for the project (play nice)
max_jobs: 1

# Environment settings
environment:

  global:
    PUBLISH: false
    TWINE_USERNAME: geocom
    TWINE_PASSWORD:
      secure: rYS2/K9Q9nPRiwmwIKTu6A==

  matrix:

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.15"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.15"
      PYTHON_ARCH: "64"

matrix:
  # Cancel other jobs for the same build if this one fails
  fast_finish: true

# Do a shallow-ish clone
clone_depth: 5

# The build setting is for .NET only: Python does not compile anything
build: false

init:
  # Determine if a distribution should be built and published (override PUBLISH variable)
  # Publish when a repo tag has been pushed on the master branch and the Python architecture is 32-bits
  - if "%APPVEYOR_REPO_TAG%" == "true" if "%APPVEYOR_REPO_BRANCH%" == "master" if "%PYTHON_ARCH%" == "32" set PUBLISH=true

  # Echo variables for verification purposes
  - ECHO python_path=%PYTHON%, version=%PYTHON_VERSION%, architecture=%PYTHON_ARCH%-bit
  - ECHO publish=%PUBLISH%, tagged=%APPVEYOR_REPO_TAG%, tag=%APPVEYOR_REPO_TAG_NAME%, branch=%APPVEYOR_REPO_BRANCH%

  # Split APPVEYOR_REPO_NAME into REPO_OWNER and REPO_NAME
  - cmd: FOR /f "tokens=1,2 delims=/" %%a IN ("%APPVEYOR_REPO_NAME%") do set REPO_OWNER=%%a&set REPO_NAME=%%b

install:
  # Prepend newly installed Python to the PATH of this build
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that Python can be found and that we really have the expected version and architecture
  - python -c "import sys;print(sys.version)"

  # Make sure that wheel and twine are installed so we can build wheels and publish to PyPI
  - pip install --user --upgrade --disable-pip-version-check pip wheel twine

  # Install the project and its dependencies
  - pip install -e .[test]

cache:
  - '%LOCALAPPDATA%\pip\Cache'

test_script:
  # Run pytest with coverage and mock arcpy module
  - py.test tests --cov=%REPO_NAME% --mock_arcpy

after_test:
  # Build standard distribution and wheel if PUBLISH is true
  - if "%PUBLISH%" == "true" python setup.py sdist bdist_wheel

artifacts:
  # Python distributions can be found in the dist directory
  - path: 'dist\*'
    name: pypi_releases

deploy:
  # Add release draft to GitHub only when PUBLISH is true
  - provider: GitHub
    auth_token:
      secure: lXMk68xShK4caI5U+BjFHnFXSgcXIubv3WlyzbQ50YbyKzcqnhgyFj4FN723j4sK
    artifact: pypi_releases
    draft: true
    prerelease: false
    force_update: true
    on:
      PUBLISH: true

on_success:
  # Publish to PyPI using Twine if PUBLISH is true
  - if "%PUBLISH%" == "true" twine upload dist\\*
